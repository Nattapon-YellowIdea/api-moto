import mongoose from 'mongoose';

const masterRegisterSchema = new mongoose.Schema({
  line_user_id: { type: String, default: '' },
  tier: { type: Number, default: 1 },
  socialtype: { type: String, default: '' },
  socialid: { type: String, default: '' },
  displayname: { type: String, default: '' },
  mobile: { type: String, default: '' },
  email: { type: String, default: '' },
  password: { type: String, default: '' },
  idnumbertype: { type: String, default: '' },
  idnumber: { type: String, default: '' },
  is_activate: { type: Boolean, default: false },
  is_consent: { type: String, default: false },
  consent_version: { type: Number, default: '' },
  serviceAccess: { type: String, default: '' },
  profile_title: { type: String, default: '' },
  profile_firstname: { type: String, default: '' },
  profile_lastname: { type: String, default: '' },
  profile_gender: { type: String, default: '' },
  profile_email: { type: String, default: '' },
  profile_mobile: { type: String, default: '' },
  profile_idnumberStatus: { type: String, default: '' },
  memberId: { type: String, default: '' },
  memberToken: { type: String, default: '' },
  memberType: { type: String, default: '' },
  memberClass: { type: String, default: '' },
  memberLv: { type: String, default: '' },
  type: { type: String, default: '' },
  code: { type: String, default: '' },
  ref_code: { type: String, default: '' },
  bill_alert_before_due: { type: Number, default: 0 },
  bill_alert_after_due: { type: Number, default: 0 },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const masterLineUserSchema = new mongoose.Schema({
  line_user_id: { type: String, default: '' },
  line_display_name: { type: String, default: '' },
  line_display_img: { type: String, default: '' },
  is_follow: { type: Boolean, default: false },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const masterRegisterServiceSchema = new mongoose.Schema({
  keyword: { type: Array, default: [] },
  datas: { type: Array, default: [] },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const transactionRegisterServiceSchema = new mongoose.Schema({
  line_user_id: { type: String, default: '' },
  type: { type: String, default: '' },
  promotion: { type: String, default: '' },
  instrument: { type: String, default: '' },
  promotion_name: { type: String, default: '' },
  promotion_speed: { type: String, default: '' },
  promotion_speed_id: { type: String, default: '' },
  promotion_package_id: { type: String, default: '' },
  promotion_offer_id: { type: String, default: '' },
  promotion_service_name: { type: String, default: '' },
  promotion_promotion_id: { type: String, default: '' },
  promotion_price: { type: Number, default: 0 },
  promotion_maintenance: { type: Number, default: 0 },
  promotion_setup: { type: Number, default: 0 },
  promotion_fee: { type: Number, default: 0 },
  promotion_over_cable: { type: Number, default: 0 },
  promotion_ont: { type: Number, default: 0 },
  instrument_name: { type: String, default: '' },
  instrument_price: { type: Number, default: 0 },
  instrument_description: { type: String, default: '' },
  instrument_cost_ont: { type: Number, default: 0 },
  instrument_ont_int: { type: Number, default: 0 },
  latitude: { type: String, default: '' },
  longitude: { type: String, default: '' },
  customer_sex: { type: Number },
  customer_title: { type: String, default: '' },
  customer_first_name: { type: String, default: '' },
  customer_last_name: { type: String, default: '' },
  personal_id: { type: String, default: '' },
  type_identity: { type: String, default: '' },
  customer_mobile: { type: String, default: '' },
  customer_email: { type: String, default: '' },
  customer_no: { type: String, default: '' },
  customer_building: { type: String, default: '' },
  customer_road: { type: String, default: '' },
  customer_subdistrict: { type: String, default: '' },
  customer_district_id: { type: String, default: '' },
  customer_province_id: { type: String, default: '' },
  customer_zip: { type: String, default: '' },
  customer_province: { type: String, default: '' },
  customer_district: { type: String, default: '' },
  customer_title_optional: { type: String, default: '' },
  ws_status: { type: String, default: '' },
  ws_status_int: { type: String, default: '' },
  install_latlng: { type: String, default: '' },
  device_id: { type: String, default: '' },
  device_name: { type: String, default: '' },
  device_type_name: { type: String, default: '' },
  exchange_id: { type: String, default: '' },
  exchange_name: { type: String, default: '' },
  office_id: { type: String, default: '' },
  office_name: { type: String, default: '' },
  office_code: { type: String, default: '' },
  office_lat_lon: { type: String, default: '' },
  distance: { type: String, default: '' },
  position: { type: String, default: '' },
  over_cable_cost: { type: String, default: '' },
  project_name: { type: String, default: '' },
  project_online: { type: String, default: '' },
  polyline: { type: String, default: '' },
  device_lat_lon: { type: String, default: '' },
  last_activity: { type: String, default: '' },
  status: { type: String, default: '' },
  create_order_order_id: { type: String, default: '' },
  create_order_order_code: { type: String, default: '' },
  create_order_customer_id: { type: String, default: '' },
  create_order_customer_code: { type: String, default: '' },
  create_order_order_status_id: { type: String, default: '' },
  create_order_ws_status_name: { type: String, default: '' },
  create_order_ws_status_int: { type: String, default: '' },
  order_status_order_id: { type: String, default: '' },
  order_status_code: { type: String, default: '' },
  order_status_sono: { type: String, default: '' },
  order_status_status_id: { type: String, default: '' },
  order_status_status_name: { type: String, default: '' },
  order_status_is_paid: { type: String, default: '' },
  order_status_promotion_name: { type: String, default: '' },
  order_status_package_name: { type: String, default: '' },
  order_status_speed: { type: String, default: '' },
  order_status_fullname: { type: String, default: '' },
  order_status_filename: { type: String, default: '' },
  order_status_office_id: { type: String, default: '' },
  order_status_cost_setup: { type: String, default: '' },
  order_status_cost_fee: { type: String, default: '' },
  order_status_cost_maintenance: { type: String, default: '' },
  order_status_cost_ont: { type: String, default: '' },
  order_status_cost_over_cable: { type: String, default: '' },
  order_status_customer_mobile: { type: String, default: '' },
  payment_otc_order_ref: { type: String, default: '' },
  payment_otc_request_ex_no: { type: String, default: '' },
  payment_otc_url: { type: String, default: '' },
  date_install_estimate: { type: String, default: '' },
  date_install_estimate_value_int: { type: String, default: '' },
  date_install_estimate_value_text: { type: String, default: '' },
  payment_payment_result: { type: String, default: '' },
  payment_sono: { type: String, default: '' },
  payment_payment_id: { type: String, default: '' },
  payment_receive_no: { type: String, default: '' },
  payment_customer_id: { type: String, default: '' },
  payment_order_id: { type: String, default: '' },
  payment_payment_methods_id: { type: String, default: '' },
  payment_amount: { type: String, default: '' },
  line_noti_payment_status: { type: String, default: '' },
  line_noti_payment_method: { type: String, default: '' },
  line_noti_order_ref: { type: String, default: '' },
  line_noti_transaction_ref: { type: String, default: '' },
  line_noti_sr: { type: String, default: '' },
  line_noti_datetime: { type: String, default: '' },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const transactionLeadFormSchema = new mongoose.Schema({
  line_user_id: { type: String, default: '' },
  username: { type: String, default: '' },
  password: { type: String, default: '' },
  first_name: { type: String, default: '' },
  last_name: { type: String, default: '' },
  mobile: { type: String, default: '' },
  date_install: { type: String, default: '' },
  latitude: { type: String, default: '' },
  longitude: { type: String, default: '' },
  address: { type: String, default: '' },
  no: { type: String, default: '' },
  village: { type: String, default: '' },
  building: { type: String, default: '' },
  moo: { type: String, default: '' },
  soi: { type: String, default: '' },
  road: { type: String, default: '' },
  province: { type: String, default: '' },
  district: { type: String, default: '' },
  sub_district: { type: String, default: '' },
  zip_code: { type: String, default: '' },
  promotion_id: { type: String, default: '' },
  speed_id: { type: String, default: '' },
  note: { type: String, default: '' },
  device_id: { type: String, default: '' },
  exchange_id: { type: String, default: '' },
  ws_status_name: { type: String, default: '' },
  ref_code: { type: String, default: '' },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const masterWorkingTimeSchema = new mongoose.Schema({
  days: { type: Object, default: {} },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const transactionLogConsentSchema = new mongoose.Schema({
  line_user_id: { type: String, default: '' },
  displayname: { type: String, default: '' },
  mobile: { type: String, default: '' },
  email: { type: String, default: '' },
  idnumber: { type: String, default: '' },
  is_consent: { type: String, default: false },
  consent_version: { type: Number, default: '' },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const termAndConditionSchema = new mongoose.Schema({
  detail: { type: Object, default: { policy: '', agreement: '' } },
  version: { type: Number, default: 0 },
  created_at: { type: Date, default: Date.now },
  updated_by: { type: String, default: '' },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const topupSchema = new mongoose.Schema({
  label: { type: String, default: '' },
  value: { type: Number, default: 0 },
  created_at: { type: Date, default: Date.now },
  updated_by: { type: String, default: '' },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const transactionLoginSchema = new mongoose.Schema({
  line_user_id: { type: String, default: '' },
  serviceAccess: { type: String, default: '' },
  clientId: { type: String, default: '' },
  memberId: { type: String, default: '' },
  memberToken: { type: String, default: '' },
  memberType: { type: String, default: '' },
  memberClass: { type: String, default: '' },
  memberLv: { type: String, default: '' },
  refreshToken: { type: Object, default: {} },
  profile: { type: Object, default: {} },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const TransactionReportProblemSchema = new mongoose.Schema({
  line_user_id: { type: String, default: '' },
  service_type: { type: String, default: '' },
  reason: { type: String, default: '' },
  customer_title: { type: String, default: '' },
  customer_title_optional: { type: String, default: '' },
  customer_first_name: { type: String, default: '' },
  customer_last_name: { type: String, default: '' },
  customer_mobile: { type: String, default: '' },
  customer_email: { type: String, default: '' },
  service_number: { type: String, default: '' },
  detail: { type: String, default: '' },
  result_code: { type: String, default: '' },
  ticket: { type: String, default: '' },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const TransactionPayBillSchema = new mongoose.Schema({
  line_user_id: { type: String, default: '' },
  balists: { type: Array },
  response: { type: Object },
  transactionRef: { type: String },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const TransactionTopupSchema = new mongoose.Schema({
  line_user_id: { type: String, default: '' },
  master_topup_id: { type: String, default: '' },
  amount: { type: String, default: '' },
  mobile: { type: String, default: '' },
  verify_response: { type: String, default: '' },
  verify_rescode: { type: String, default: '' },
  verify_res_mesg: { type: String, default: '' },
  verify_tran_id: { type: String, default: '' },
  verify_reference2: { type: String, default: '' },
  verify_payment_id: { type: String, default: '' },
  payment_otc_request_ex_no: { type: String, default: '' },
  payment_otc_url: { type: String, default: '' },
  line_noti_payment_status: { type: String, default: '' },
  line_noti_payment_method: { type: String, default: '' },
  line_noti_order_ref: { type: String, default: '' },
  line_noti_transaction_ref: { type: String, default: '' },
  line_noti_invoiceno: { type: String, default: '' },
  opm_noti_status: { type: String, default: '' },
  opm_noti_trans_id: { type: String, default: '' },
  opm_noti_phone_number: { type: String, default: '' },
  opm_noti_amount: { type: String, default: '' },
  opm_noti_datetime: { type: String, default: '' },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const TransactionLineNotifiesSchema = new mongoose.Schema({
  account_no: { type: String, default: '' },
  name: { type: String, default: '' },
  amount: { type: String, default: '' },
  min_due_date: { type: String, default: '' },
  max_due_date: { type: String, default: '' },
  service_no: { type: String, default: '' },
  location_code: { type: String, default: '' },
  ref: { type: String, default: '' },
  off_fuse_date: { type: String, default: '' },
  type: { type: String, default: '' },
  flag: { type: String, default: '' },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const TransactionHistoryFileLineNotifiesSchema = new mongoose.Schema({
  filename: { type: String, default: '' },
  total: { type: String, default: '' },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const TransactionBASchema = new mongoose.Schema({
  line_user_id: { type: String, default: '' },
  ba: { type: String, default: '' },
  serviceno: { type: String, default: '' },
  admin: { type: String, default: '' },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const TransactionFindCenterSchema = new mongoose.Schema({
  line_user_id: { type: String, default: '' },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const TransactionRequestResponseExternalSchema = new mongoose.Schema({
  line_user_id: { type: String, default: '' },
  service: { type: String, default: '' },
  function: { type: String, default: '' },
  start: { type: String, default: '' },
  stop: { type: String, default: '' },
  time_diff: { type: String, default: '' },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

const TransactionVerifyOtpSchema = new mongoose.Schema({
  line_user_id: { type: String, default: '' },
  service: { type: String, default: '' },
  phoneNumber: { type: String, default: '' },
  otpNumber: { type: String, default: '' },
  ref_code: { type: String, default: '' },
  is_activate: { type: Boolean, default: false },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
  deleted_at: { type: Date, default: null },
}, { versionKey: false });

export const MasterRegister = mongoose.models.master_registers || mongoose.model('master_registers', masterRegisterSchema);
export const MasterRegisterService = mongoose.model('master_register_services', masterRegisterServiceSchema);
export const TransactionRegisterService = mongoose.models.transaction_register_services || mongoose.model('transaction_register_services', transactionRegisterServiceSchema);
export const TransactionLeadForm = mongoose.model('transaction_lead_form', transactionLeadFormSchema);
export const MasterWorkingTime = mongoose.model('master_working_time', masterWorkingTimeSchema);
export const TransactionLogConsent = mongoose.models.transaction_log_consent || mongoose.model('transaction_log_consent', transactionLogConsentSchema);
export const MasterTermAndCondition = mongoose.models.term_and_condition || mongoose.model('master_term_and_condition', termAndConditionSchema);
export const MasterTopup = mongoose.models.master_topup || mongoose.model('master_topup', topupSchema);
export const TransactionLogin = mongoose.models.transaction_login || mongoose.model('transaction_login', transactionLoginSchema);
export const TransactionReportProblem = mongoose.models.transaction_report_problem || mongoose.model('transaction_report_problem', TransactionReportProblemSchema);
export const TransactionPayBill = mongoose.models.transaction_pay_bill || mongoose.model('transaction_pay_bill', TransactionPayBillSchema);
export const TransactionTopup = mongoose.models.transaction_topup || mongoose.model('transaction_topup', TransactionTopupSchema);
export const TransactionLineNotifies = mongoose.models.transaction_line_notifies || mongoose.model('transaction_line_notifies', TransactionLineNotifiesSchema);
export const TransactionHistoryFileLineNotifies = mongoose.models.transaction_history_file_line_notifies || mongoose.model('transaction_history_fileline_notifies', TransactionHistoryFileLineNotifiesSchema);
export const TransactionBA = mongoose.models.transaction_ba || mongoose.model('transaction_ba', TransactionBASchema);
export const TransactionFindCenter = mongoose.models.transaction_find_center || mongoose.model('transaction_find_center', TransactionFindCenterSchema);
export const MasterLineUser = mongoose.models.master_line_users || mongoose.model('master_line_users', masterLineUserSchema);
export const TransactionRequestResponseExternal = mongoose.models.transaction_request_response_external || mongoose.model('transaction_request_response_external', TransactionRequestResponseExternalSchema);
export const TransactionVerifyOtp = mongoose.models.transaction_verify_otp || mongoose.model('transaction_verify_otp', TransactionVerifyOtpSchema);
